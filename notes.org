
Sprites (access the pixel and then set the colors)
Animations

Create a simple menu

Create sprites

Create a scene architecture for moving between different types of games.

A good exercise for the Engine class would be to see something like how to load OpenGL shaders, and then have to improve on it. For instance, storing the uniform and attribute locations.


Get the tile to move and go up or down everytime it hits the edge.


"Then comes the hard part: what is worth doing?"
I love you Brian Moriarty

Something I love about his style is making metaphors/allegories to a lot of different fields: 
Music
Sports
Games
Movies
Writing


My question is: is this a useful way to learn how to program and do game design? 



Games are:
input data
operations on that data
output data


Overload V4() so we don't get those obnoxious errors when not everything is a floating point. 


Write a clear API and documentation. 

DynamicArray is probably necessary, especially for tiles 

Clearly separate things because it's very easy to mess up by moving the grid rendering code, or checking for input in the wrong place, etc. Especially so they can easily create a new game by copy-pasting the directory and not needing to easily segmenting their code from the other stuff. Like we could have 
Tile {
   basic;
   custom;
};

Possible to teach math stuff with this? 


Oh this could be really cool for Gray Matter!


DESIGN: 
I think we need the tiles to record some time information: last time changed position

If you change the grid size do we delete tiles out of bounds? 

GlobalVars file Thekla style? Could move things like screen/board/line color in there, but that isn't really a huge barrier to entry...
        
Things like repeat key rate might be something we want internal...

I'd rather not pass in input to InputPressed

Do we do thins GOL style and say each tile is just on or off, there is no such thing as deletion or moving? That seems counterintuitive for a lot of games (moving a pawn is actually turning this thing to nothing and this tile to a pawn)

I kinda like the animation system used in GOL, might be nice to implement that here. This depends on whether tiles/cells have positions, or are simply coordinates in space

Wow this is a lot like Changes...


TODO: 
audio
Font rendering
custom sprites on a tile? Kinda flies in the face of the idea but Perlenspiel has it...
path finding?
Saving/loading games state?
Animations (like start lerping between these colors or something?)
Debug log (kinda weird to implement a sophisticated text rendering system in something that doesn't let you do anything more advanced than a line at the top...)



TODO: figure out whats up with glTexParameter and why its necessary
      Frame buffers

We should have a text region on the right, and the graph on the left, when you select certain things it'll pop up some text on the right.


I want to start drawing passing in colors so we'll build up buffers, copy the data, and then draw with color as a vertex attrib


Create a library for interactive math experiments

Needs to require very little programming knowledge (but could be good testing ground for basic logic/control flow)

Puzzle game: could be make the dot product < 0. Make it 0, etc. Make this face a diffrent way from this object (using dot product). 
Move vectors into different spaces, like transforming the direction into normalized space. 
Is this thing's coordinates in world or local space? 

Set t value so the point reaches the destination. Write a calculation for t so that it arrives in 2 seconds
Change the values of the easing function so the curves match


Lerp
Rotations
Easing functions
Dot product
Cross Product
Quaternions
Geometry

Importantly need to be able to solve equations like "I want this to arrive in n seconds, how do I do that" or "it moves this fast, what time will it arrive"
  Basic algebraic equations like that
